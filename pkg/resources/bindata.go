// Package resources Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// resources/licenses.txt
package resources

import (
	"bytes"
	"fmt"
	"net/http"
	"io/ioutil"
	"os"
	"path/filepath"
	"reflect"
	"strings"
	"time"
	"unsafe"
)

func bindataRead(data, name string) ([]byte, error) {
	var empty [0]byte
	sx := (*reflect.StringHeader)(unsafe.Pointer(&data))
	b := empty[:]
	bx := (*reflect.SliceHeader)(unsafe.Pointer(&b))
	bx.Data = sx.Data
	bx.Len = len(data)
	bx.Cap = bx.Len
	return b, nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}


type assetFile struct {
	*bytes.Reader
	name            string
	childInfos      []os.FileInfo
	childInfoOffset int
}

type assetOperator struct{}

// Open implement http.FileSystem interface
func (f *assetOperator) Open(name string) (http.File, error) {
	var err error
	if len(name) > 0 && name[0] == '/' {
		name = name[1:]
	}
	content, err := Asset(name)
	if err == nil {
		return &assetFile{name: name, Reader: bytes.NewReader(content)}, nil
	}
	children, err := AssetDir(name)
	if err == nil {
		childInfos := make([]os.FileInfo, 0, len(children))
		for _, child := range children {
			childPath := filepath.Join(name, child)
			info, errInfo := AssetInfo(filepath.Join(name, child))
			if errInfo == nil {
				childInfos = append(childInfos, info)
			} else {
				childInfos = append(childInfos, newDirFileInfo(childPath))
			}
		}
		return &assetFile{name: name, childInfos: childInfos}, nil
	} else {
		// If the error is not found, return an error that will
		// result in a 404 error. Otherwise the server returns
		// a 500 error for files not found.
		if strings.Contains(err.Error(), "not found") {
			return nil, os.ErrNotExist
		}
		return nil, err
	}
}

// Close no need do anything
func (f *assetFile) Close() error {
	return nil
}

// Readdir read dir's children file info
func (f *assetFile) Readdir(count int) ([]os.FileInfo, error) {
	if len(f.childInfos) == 0 {
		return nil, os.ErrNotExist
	}
	if count <= 0 {
		return f.childInfos, nil
	}
	if f.childInfoOffset+count > len(f.childInfos) {
		count = len(f.childInfos) - f.childInfoOffset
	}
	offset := f.childInfoOffset
	f.childInfoOffset += count
	return f.childInfos[offset : offset+count], nil
}

// Stat read file info from asset item
func (f *assetFile) Stat() (os.FileInfo, error) {
	if len(f.childInfos) != 0 {
		return newDirFileInfo(f.name), nil
	}
	return AssetInfo(f.name)
}

// newDirFileInfo return default dir file info
func newDirFileInfo(name string) os.FileInfo {
	return &bindataFileInfo{
		name:    name,
		size:    0,
		mode:    os.FileMode(2147484068), // equal os.FileMode(0644)|os.ModeDir
		modTime: time.Time{}}
}

// AssetFile return a http.FileSystem instance that data backend by asset
func AssetFile() http.FileSystem {
	return &assetOperator{}
}

var _licensesTxt = "\x67\x69\x74\x68\x75\x62\x2e\x63\x6f\x6d\x2f\x67\x72\x70\x63\x2d\x65\x63\x6f\x73\x79\x73\x74\x65\x6d\x2f\x67\x72\x70\x63\x2d\x67\x61\x74\x65\x77\x61\x79\x2c\x68\x74\x74\x70\x73\x3a\x2f\x2f\x67\x69\x74\x68\x75\x62\x2e\x63\x6f\x6d\x2f\x67\x72\x70\x63\x2d\x65\x63\x6f\x73\x79\x73\x74\x65\x6d\x2f\x67\x72\x70\x63\x2d\x67\x61\x74\x65\x77\x61\x79\x2f\x62\x6c\x6f\x62\x2f\x6d\x61\x73\x74\x65\x72\x2f\x4c\x49\x43\x45\x4e\x53\x45\x2e\x74\x78\x74\x2c\x42\x53\x44\x2d\x33\x2d\x43\x6c\x61\x75\x73\x65\x0d\x0a\x67\x69\x74\x68\x75\x62\x2e\x63\x6f\x6d\x2f\x64\x67\x72\x79\x73\x6b\x69\x2f\x67\x6f\x2d\x66\x61\x72\x6d\x2c\x68\x74\x74\x70\x73\x3a\x2f\x2f\x67\x69\x74\x68\x75\x62\x2e\x63\x6f\x6d\x2f\x64\x67\x72\x79\x73\x6b\x69\x2f\x67\x6f\x2d\x66\x61\x72\x6d\x2f\x62\x6c\x6f\x62\x2f\x6d\x61\x73\x74\x65\x72\x2f\x4c\x49\x43\x45\x4e\x53\x45\x2c\x4d\x49\x54\x0d\x0a\x67\x69\x74\x68\x75\x62\x2e\x63\x6f\x6d\x2f\x73\x68\x6f\x70\x73\x70\x72\x69\x6e\x67\x2f\x64\x65\x63\x69\x6d\x61\x6c\x2c\x68\x74\x74\x70\x73\x3a\x2f\x2f\x67\x69\x74\x68\x75\x62\x2e\x63\x6f\x6d\x2f\x73\x68\x6f\x70\x73\x70\x72\x69\x6e\x67\x2f\x64\x65\x63\x69\x6d\x61\x6c\x2f\x62\x6c\x6f\x62\x2f\x6d\x61\x73\x74\x65\x72\x2f\x4c\x49\x43\x45\x4e\x53\x45\x2c\x4d\x49\x54\x0d\x0a\x67\x6f\x2e\x75\x62\x65\x72\x2e\x6f\x72\x67\x2f\x6d\x75\x6c\x74\x69\x65\x72\x72\x2c\x55\x6e\x6b\x6e\x6f\x77\x6e\x2c\x4d\x49\x54\x0d\x0a\x67\x6f\x2e\x75\x62\x65\x72\x2e\x6f\x72\x67\x2f\x7a\x61\x70\x2c\x55\x6e\x6b\x6e\x6f\x77\x6e\x2c\x4d\x49\x54\x0d\x0a\x67\x6f\x6f\x67\x6c\x65\x2e\x67\x6f\x6c\x61\x6e\x67\x2e\x6f\x72\x67\x2f\x70\x72\x6f\x74\x6f\x62\x75\x66\x2c\x55\x6e\x6b\x6e\x6f\x77\x6e\x2c\x42\x53\x44\x2d\x33\x2d\x43\x6c\x61\x75\x73\x65\x0d\x0a\x67\x6f\x6c\x61\x6e\x67\x2e\x6f\x72\x67\x2f\x78\x2f\x73\x79\x73\x2c\x55\x6e\x6b\x6e\x6f\x77\x6e\x2c\x42\x53\x44\x2d\x33\x2d\x43\x6c\x61\x75\x73\x65\x0d\x0a\x67\x6f\x6c\x61\x6e\x67\x2e\x6f\x72\x67\x2f\x78\x2f\x63\x72\x79\x70\x74\x6f\x2c\x55\x6e\x6b\x6e\x6f\x77\x6e\x2c\x42\x53\x44\x2d\x33\x2d\x43\x6c\x61\x75\x73\x65\x0d\x0a\x67\x69\x74\x68\x75\x62\x2e\x63\x6f\x6d\x2f\x64\x67\x72\x61\x70\x68\x2d\x69\x6f\x2f\x62\x61\x64\x67\x65\x72\x2f\x76\x32\x2c\x68\x74\x74\x70\x73\x3a\x2f\x2f\x67\x69\x74\x68\x75\x62\x2e\x63\x6f\x6d\x2f\x64\x67\x72\x61\x70\x68\x2d\x69\x6f\x2f\x62\x61\x64\x67\x65\x72\x2f\x62\x6c\x6f\x62\x2f\x6d\x61\x73\x74\x65\x72\x2f\x76\x32\x2f\x4c\x49\x43\x45\x4e\x53\x45\x2c\x41\x70\x61\x63\x68\x65\x2d\x32\x2e\x30\x0d\x0a\x67\x69\x74\x68\x75\x62\x2e\x63\x6f\x6d\x2f\x67\x6f\x6c\x61\x6e\x67\x2f\x73\x6e\x61\x70\x70\x79\x2c\x68\x74\x74\x70\x73\x3a\x2f\x2f\x67\x69\x74\x68\x75\x62\x2e\x63\x6f\x6d\x2f\x67\x6f\x6c\x61\x6e\x67\x2f\x73\x6e\x61\x70\x70\x79\x2f\x62\x6c\x6f\x62\x2f\x6d\x61\x73\x74\x65\x72\x2f\x4c\x49\x43\x45\x4e\x53\x45\x2c\x42\x53\x44\x2d\x33\x2d\x43\x6c\x61\x75\x73\x65\x0d\x0a\x67\x6f\x6f\x67\x6c\x65\x2e\x67\x6f\x6c\x61\x6e\x67\x2e\x6f\x72\x67\x2f\x67\x72\x70\x63\x2c\x55\x6e\x6b\x6e\x6f\x77\x6e\x2c\x41\x70\x61\x63\x68\x65\x2d\x32\x2e\x30\x0d\x0a\x61\x72\x70\x61\x62\x65\x74\x2e\x70\x6b\x67\x2e\x69\x73\x2f\x74\x69\x6d\x65\x75\x75\x69\x64\x2c\x68\x74\x74\x70\x73\x3a\x2f\x2f\x61\x72\x70\x61\x62\x65\x74\x2e\x70\x6b\x67\x2e\x69\x73\x2f\x74\x69\x6d\x65\x75\x75\x69\x64\x2f\x62\x6c\x6f\x62\x2f\x6d\x61\x73\x74\x65\x72\x2f\x4c\x49\x43\x45\x4e\x53\x45\x2c\x41\x70\x61\x63\x68\x65\x2d\x32\x2e\x30\x0d\x0a\x61\x72\x70\x61\x62\x65\x74\x2e\x70\x6b\x67\x2e\x69\x73\x2f\x70\x72\x65\x66\x65\x72\x65\x6e\x63\x65\x73\x2c\x68\x74\x74\x70\x73\x3a\x2f\x2f\x61\x72\x70\x61\x62\x65\x74\x2e\x70\x6b\x67\x2e\x69\x73\x2f\x70\x72\x65\x66\x65\x72\x65\x6e\x63\x65\x73\x2f\x62\x6c\x6f\x62\x2f\x6d\x61\x73\x74\x65\x72\x2f\x4c\x49\x43\x45\x4e\x53\x45\x2c\x41\x70\x61\x63\x68\x65\x2d\x32\x2e\x30\x0d\x0a\x67\x69\x74\x68\x75\x62\x2e\x63\x6f\x6d\x2f\x64\x67\x72\x61\x70\x68\x2d\x69\x6f\x2f\x72\x69\x73\x74\x72\x65\x74\x74\x6f\x2c\x68\x74\x74\x70\x73\x3a\x2f\x2f\x67\x69\x74\x68\x75\x62\x2e\x63\x6f\x6d\x2f\x64\x67\x72\x61\x70\x68\x2d\x69\x6f\x2f\x72\x69\x73\x74\x72\x65\x74\x74\x6f\x2f\x62\x6c\x6f\x62\x2f\x6d\x61\x73\x74\x65\x72\x2f\x4c\x49\x43\x45\x4e\x53\x45\x2c\x41\x70\x61\x63\x68\x65\x2d\x32\x2e\x30\x0d\x0a\x67\x6f\x6c\x61\x6e\x67\x2e\x6f\x72\x67\x2f\x78\x2f\x74\x65\x78\x74\x2c\x55\x6e\x6b\x6e\x6f\x77\x6e\x2c\x42\x53\x44\x2d\x33\x2d\x43\x6c\x61\x75\x73\x65\x0d\x0a\x67\x69\x74\x68\x75\x62\x2e\x63\x6f\x6d\x2f\x64\x75\x73\x74\x69\x6e\x2f\x67\x6f\x2d\x68\x75\x6d\x61\x6e\x69\x7a\x65\x2c\x68\x74\x74\x70\x73\x3a\x2f\x2f\x67\x69\x74\x68\x75\x62\x2e\x63\x6f\x6d\x2f\x64\x75\x73\x74\x69\x6e\x2f\x67\x6f\x2d\x68\x75\x6d\x61\x6e\x69\x7a\x65\x2f\x62\x6c\x6f\x62\x2f\x6d\x61\x73\x74\x65\x72\x2f\x4c\x49\x43\x45\x4e\x53\x45\x2c\x4d\x49\x54\x0d\x0a\x67\x69\x74\x68\x75\x62\x2e\x63\x6f\x6d\x2f\x61\x72\x70\x61\x62\x65\x74\x2f\x73\x70\x72\x69\x6e\x74\x2c\x55\x6e\x6b\x6e\x6f\x77\x6e\x2c\x55\x6e\x6b\x6e\x6f\x77\x6e\x0d\x0a\x67\x69\x74\x68\x75\x62\x2e\x63\x6f\x6d\x2f\x61\x72\x70\x61\x62\x65\x74\x2f\x73\x70\x72\x69\x6e\x74\x2f\x70\x6b\x67\x2f\x61\x70\x70\x2c\x55\x6e\x6b\x6e\x6f\x77\x6e\x2c\x55\x6e\x6b\x6e\x6f\x77\x6e\x0d\x0a\x67\x69\x74\x68\x75\x62\x2e\x63\x6f\x6d\x2f\x61\x72\x70\x61\x62\x65\x74\x2f\x73\x70\x72\x69\x6e\x74\x2f\x70\x6b\x67\x2f\x70\x62\x2c\x55\x6e\x6b\x6e\x6f\x77\x6e\x2c\x55\x6e\x6b\x6e\x6f\x77\x6e\x0d\x0a\x67\x69\x74\x68\x75\x62\x2e\x63\x6f\x6d\x2f\x61\x72\x70\x61\x62\x65\x74\x2f\x73\x70\x72\x69\x6e\x74\x2f\x70\x6b\x67\x2f\x72\x65\x73\x6f\x75\x72\x63\x65\x73\x2c\x55\x6e\x6b\x6e\x6f\x77\x6e\x2c\x55\x6e\x6b\x6e\x6f\x77\x6e\x0d\x0a\x67\x69\x74\x68\x75\x62\x2e\x63\x6f\x6d\x2f\x61\x72\x70\x61\x62\x65\x74\x2f\x73\x70\x72\x69\x6e\x74\x2f\x70\x6b\x67\x2f\x63\x6d\x64\x2c\x55\x6e\x6b\x6e\x6f\x77\x6e\x2c\x55\x6e\x6b\x6e\x6f\x77\x6e\x0d\x0a\x67\x69\x74\x68\x75\x62\x2e\x63\x6f\x6d\x2f\x61\x72\x70\x61\x62\x65\x74\x2f\x73\x70\x72\x69\x6e\x74\x2f\x70\x6b\x67\x2f\x63\x6c\x69\x65\x6e\x74\x2c\x55\x6e\x6b\x6e\x6f\x77\x6e\x2c\x55\x6e\x6b\x6e\x6f\x77\x6e\x0d\x0a\x67\x69\x74\x68\x75\x62\x2e\x63\x6f\x6d\x2f\x61\x72\x70\x61\x62\x65\x74\x2f\x73\x70\x72\x69\x6e\x74\x2f\x70\x6b\x67\x2f\x75\x74\x69\x6c\x2c\x55\x6e\x6b\x6e\x6f\x77\x6e\x2c\x55\x6e\x6b\x6e\x6f\x77\x6e\x0d\x0a\x67\x69\x74\x68\x75\x62\x2e\x63\x6f\x6d\x2f\x61\x72\x70\x61\x62\x65\x74\x2f\x73\x70\x72\x69\x6e\x74\x2f\x70\x6b\x67\x2f\x64\x62\x2c\x55\x6e\x6b\x6e\x6f\x77\x6e\x2c\x55\x6e\x6b\x6e\x6f\x77\x6e\x0d\x0a\x67\x69\x74\x68\x75\x62\x2e\x63\x6f\x6d\x2f\x61\x72\x70\x61\x62\x65\x74\x2f\x73\x70\x72\x69\x6e\x74\x2f\x70\x6b\x67\x2f\x72\x75\x6e\x2c\x55\x6e\x6b\x6e\x6f\x77\x6e\x2c\x55\x6e\x6b\x6e\x6f\x77\x6e\x0d\x0a\x67\x69\x74\x68\x75\x62\x2e\x63\x6f\x6d\x2f\x61\x72\x70\x61\x62\x65\x74\x2f\x73\x70\x72\x69\x6e\x74\x2f\x70\x6b\x67\x2f\x73\x65\x72\x76\x69\x63\x65\x2c\x55\x6e\x6b\x6e\x6f\x77\x6e\x2c\x55\x6e\x6b\x6e\x6f\x77\x6e\x0d\x0a\x67\x69\x74\x68\x75\x62\x2e\x63\x6f\x6d\x2f\x64\x67\x72\x61\x70\x68\x2d\x69\x6f\x2f\x72\x69\x73\x74\x72\x65\x74\x74\x6f\x2f\x7a\x2c\x68\x74\x74\x70\x73\x3a\x2f\x2f\x67\x69\x74\x68\x75\x62\x2e\x63\x6f\x6d\x2f\x64\x67\x72\x61\x70\x68\x2d\x69\x6f\x2f\x72\x69\x73\x74\x72\x65\x74\x74\x6f\x2f\x62\x6c\x6f\x62\x2f\x6d\x61\x73\x74\x65\x72\x2f\x7a\x2f\x4c\x49\x43\x45\x4e\x53\x45\x2c\x4d\x49\x54\x0d\x0a\x67\x6f\x2e\x75\x62\x65\x72\x2e\x6f\x72\x67\x2f\x61\x74\x6f\x6d\x69\x63\x2c\x55\x6e\x6b\x6e\x6f\x77\x6e\x2c\x4d\x49\x54\x0d\x0a\x61\x72\x70\x61\x62\x65\x74\x2e\x70\x6b\x67\x2e\x69\x73\x2f\x63\x6f\x6e\x74\x65\x78\x74\x2c\x68\x74\x74\x70\x73\x3a\x2f\x2f\x61\x72\x70\x61\x62\x65\x74\x2e\x70\x6b\x67\x2e\x69\x73\x2f\x63\x6f\x6e\x74\x65\x78\x74\x2f\x62\x6c\x6f\x62\x2f\x6d\x61\x73\x74\x65\x72\x2f\x4c\x49\x43\x45\x4e\x53\x45\x2c\x41\x70\x61\x63\x68\x65\x2d\x32\x2e\x30\x0d\x0a\x67\x69\x74\x68\x75\x62\x2e\x63\x6f\x6d\x2f\x67\x6f\x6c\x61\x6e\x67\x2f\x70\x72\x6f\x74\x6f\x62\x75\x66\x2c\x68\x74\x74\x70\x73\x3a\x2f\x2f\x67\x69\x74\x68\x75\x62\x2e\x63\x6f\x6d\x2f\x67\x6f\x6c\x61\x6e\x67\x2f\x70\x72\x6f\x74\x6f\x62\x75\x66\x2f\x62\x6c\x6f\x62\x2f\x6d\x61\x73\x74\x65\x72\x2f\x4c\x49\x43\x45\x4e\x53\x45\x2c\x42\x53\x44\x2d\x33\x2d\x43\x6c\x61\x75\x73\x65\x0d\x0a\x67\x6f\x6c\x61\x6e\x67\x2e\x6f\x72\x67\x2f\x78\x2f\x6e\x65\x74\x2c\x55\x6e\x6b\x6e\x6f\x77\x6e\x2c\x42\x53\x44\x2d\x33\x2d\x43\x6c\x61\x75\x73\x65\x0d\x0a\x61\x72\x70\x61\x62\x65\x74\x2e\x70\x6b\x67\x2e\x69\x73\x2f\x76\x61\x6c\x75\x65\x2c\x68\x74\x74\x70\x73\x3a\x2f\x2f\x61\x72\x70\x61\x62\x65\x74\x2e\x70\x6b\x67\x2e\x69\x73\x2f\x76\x61\x6c\x75\x65\x2f\x62\x6c\x6f\x62\x2f\x6d\x61\x73\x74\x65\x72\x2f\x4c\x49\x43\x45\x4e\x53\x45\x2c\x41\x70\x61\x63\x68\x65\x2d\x32\x2e\x30\x0d\x0a\x67\x69\x74\x68\x75\x62\x2e\x63\x6f\x6d\x2f\x63\x65\x73\x70\x61\x72\x65\x2f\x78\x78\x68\x61\x73\x68\x2c\x68\x74\x74\x70\x73\x3a\x2f\x2f\x67\x69\x74\x68\x75\x62\x2e\x63\x6f\x6d\x2f\x63\x65\x73\x70\x61\x72\x65\x2f\x78\x78\x68\x61\x73\x68\x2f\x62\x6c\x6f\x62\x2f\x6d\x61\x73\x74\x65\x72\x2f\x4c\x49\x43\x45\x4e\x53\x45\x2e\x74\x78\x74\x2c\x4d\x49\x54\x0d\x0a\x67\x69\x74\x68\x75\x62\x2e\x63\x6f\x6d\x2f\x70\x6b\x67\x2f\x65\x72\x72\x6f\x72\x73\x2c\x68\x74\x74\x70\x73\x3a\x2f\x2f\x67\x69\x74\x68\x75\x62\x2e\x63\x6f\x6d\x2f\x70\x6b\x67\x2f\x65\x72\x72\x6f\x72\x73\x2f\x62\x6c\x6f\x62\x2f\x6d\x61\x73\x74\x65\x72\x2f\x4c\x49\x43\x45\x4e\x53\x45\x2c\x42\x53\x44\x2d\x32\x2d\x43\x6c\x61\x75\x73\x65\x0d\x0a\x67\x6f\x6f\x67\x6c\x65\x2e\x67\x6f\x6c\x61\x6e\x67\x2e\x6f\x72\x67\x2f\x67\x65\x6e\x70\x72\x6f\x74\x6f\x2c\x55\x6e\x6b\x6e\x6f\x77\x6e\x2c\x41\x70\x61\x63\x68\x65\x2d\x32\x2e\x30\x0d\x0a\x67\x69\x74\x68\x75\x62\x2e\x63\x6f\x6d\x2f\x44\x61\x74\x61\x44\x6f\x67\x2f\x7a\x73\x74\x64\x2c\x68\x74\x74\x70\x73\x3a\x2f\x2f\x67\x69\x74\x68\x75\x62\x2e\x63\x6f\x6d\x2f\x44\x61\x74\x61\x44\x6f\x67\x2f\x7a\x73\x74\x64\x2f\x62\x6c\x6f\x62\x2f\x6d\x61\x73\x74\x65\x72\x2f\x4c\x49\x43\x45\x4e\x53\x45\x2c\x42\x53\x44\x2d\x33\x2d\x43\x6c\x61\x75\x73\x65\x0d\x0a"

func licensesTxtBytes() ([]byte, error) {
	return bindataRead(
		_licensesTxt,
		"licenses.txt",
	)
}

func licensesTxt() (*asset, error) {
	bytes, err := licensesTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "licenses.txt", size: 2411, mode: os.FileMode(438), modTime: time.Unix(1621923707, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"licenses.txt": licensesTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"licenses.txt": &bintree{licensesTxt, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
